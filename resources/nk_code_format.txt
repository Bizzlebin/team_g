NK Code Format

nkfs:/red/communication/nk_code_format.txt

***

By JBT

***

Created on 2019-08-25

Updated on 2020-11-23

***

Copyright © JBT

All rights reserved. ***Pre-release: do not distribute!***

"""THE WORK IS PROVIDED "AS IS" AND THE AUTHORS AND OWNERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS WORK INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS OR OWNERS BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS WORK."""

+++
Description

The standard New Kidronite method for formatting and styling programs, extending the UEWSG and mirroring the NK Recipe Format. Much of the inspiration came from the old JavaScript Quick Guide, which also contained lots of more JS-specific tips, tricks, and tutorials and which was created on 2015-09-23 .

+++
Format Summary

IAFO:

Imports
Assignments
Functions
Output

+++
Styling

===
Comments

• Keep all comments and styling up to date!
• Use the "code within comments" method, breaking the code up logically and *tersely* summarizing key points.
• Use all the divisions that apply, leaving those that don't blank; *all* classes and functions should be given a division and heading (even if the rest of the details are in a docstring, like in Python), though the """main()""" function—*always* in Output—does not require extra documentation (eg, a docstring) since it is already documented at the file/module level.
• Keep comments clear and helpful—code should be largely *self-documenting* but still *well-documented*, especially when dealing with obscure compatibility concerns, confusing problems, etc.
• Use hyperlinks or references to keep comments on difficult matters focused yet still provide more information and rationale.
• Derive man pages directly from [non-inline] code comments, without change.
• Code that is more complex and more important should have more comments, but all extra documentation—including full project changelogs, marketing materials, and training info—should generally *not* be placed in code comments. 
• If you are unsure, leave a comment—it can be hidden easily (or even removed) if it outlives its usefulness.
• Avoid excessive double line breaks (ie, blank lines) in the code, comments that share the same line as code, and other tricks that violate the UEWSG and make both code harder to read and comments harder to hide.

===
Code

• Use version control (eg, Git) to manage code projects and changes between releases.
• Use *single* quotes as a default in programming for easy nesting of double quotes (eg, creating HTML strings or nesting JavaScript into an HTML page).
• Commented-out code should be retained—even committed—if it remains relevant, whether as a right way to do things or a wrong one!
• Imported modules should come first, followed in the same division by any namespacing information (eg, C++'s """using namespace""").
• User-set identifiers should be imported as data, handled by functions (eg, """input_float()"""), or, in the worst case and when a user will directly modify a script, be given a *clear* place at the beginning of the constants.
• All identifiers (ie, constants and variables) should be given descriptive snake_case names unless otherwise noted.
• All initialized (ie, unassigned) variables may be listed together on one line for simplicity, but may also be listed like other identifiers.
•• Never run functions or other actions during variable assignment—if a variable must be assigned to a function or action, leave it unassigned and call/assign it later!
• All other identifiers must be assigned on their own line with a *separate* const/var/etc statement.
• """CONSTANTS""" should be listed after initializations, with descriptive uppercase names.
• Classes should start with uppercase letters but otherwise follow snake_case.
• Exceptions (and their classes/constructors) should be written in capital CamelCase, since they're exceptions!
• Function names should be verbs and should start with input (eg, """input_int()""") for user-facing input, one of the 4 CURD verbs (namely create, update, read, delete—though read is probably the least common of these: reading is generally handled by built-ins and the other verbs often take precedence as the primary action) for all other types of processing (ie, the X in IXO), or output (eg, """output_answer()""") for user-facing output [if they are not part of the main procedure].
• The main output procedure (or """main()""" function in some languages; do *not* use such a function unless the language requires it) may contain all I/O operations for small programs but larger programs should consider breaking the code into modular functions, limiting user-facing I/O only to the main procedure and any functions that are prefixed with the verbs input or output.
•• Any initialization code, which actually invokes """main()""", should be placed last; it should not receive a separate heading.

===
Indentation

According to the UEWSG, indentation must be made with **tabs**; spaces are not only unsemantic, but anti-user. Further, the Whitesmiths style of indented code blocks should be followed, a style which mirrors the semantics of the UEWSG—as well as Python—and promotes a high level of readability in the code. A JavaScript example; 0- or 1-element constructs (function headers, dictionaries, etc) should always be inlined:

"""
function example(para_1)
	{
	read_thing_1();
	update_thing_2();
	return thing_3;
	}
"""

A Python example with more than one parameter—thus a multi-line format—and type annotations:

"""
def example_2 \
	(
	para_1: str,
	para_2: int = 0
	) -> bool:

	return False
"""

===
Syntax Highlighting

Based on the NK Ceremonial Color Palette, the following colors are the default for syntax-highlighting code (dark to light):

1. Red: functions, classes
2. Blue: vars, highlight
3. White: text, str
4. Brown: control chars, keywords
5. Green: block comments, comments
6. Purple: operators, int
7. Black: background, UI elements
8. Yellow: decorators, errors

+++
Format

===
Inline Comments (Python Style)

"""
# [Title and other metadata according to NK Metadata Format]
# 
# ...
# 
# +++
# Description
# 
# ["Long" description: what, briefly how, and rarely why; the description, if necessary, should be longer and more complete than the subtitle/short title but need not be a novel; more background information may go in subsequent paragraphs (note they may not get parsed as an automatic "Long Description" by some tools), the footer, or into another document in the case of especially detailed information (eg, "Complete Tutorial On New Program" or "The Secret History Of Old Program"), as noted under "Comments", above]
# 
# ... # More front matter is permissible, though code should generally not have a TOC or foreword; also, leave uncommented blank line below, to allow parsing of *every* language's header and, in Python, to close implicit docstring after the header concludes
# 

# 
# +++
# Imports
# 

# 
# +++
# Assignments
# 
# ===
# Initializations
# 

# 
# ===
# Constants
# 

# 
# +++
# Functions
# 
# ===
# Classes
# 
[class Class():
	'''
	Docstring—with *single* quotes (the PEP is wrong!)—starts with a 1-sentence brief summary of the class.

	Optional paragraphs may follow, providing more details about the *use* of the class; these may get parsed as documentation. A class diagram is entirely optional but generally redundant, given that each method will have its own documentation; if used, it should appear last.
	'''
	'''
	A second docstring, directly after the first, may be used to document the unexposed *design* of the class and issues related to the development and testing, particularly if there are concerns which cannot be adequately addressed by inline comments.
	'''

	def class_method(): #  Read Definitions, below; don't forget to leave 1 blank line after the docstring(s)—or function header, if there is no docstring
		...
]
# 
# ===
# Definitions
# 
[def function \
	(
	arg_1: str,
	arg_2: bool = True,
	arg_3: int
	) -> str:
	'''
	Docstring—with *single* quotes (the PEP is wrong!)—starts with a 1-sentence brief summary of the function in active voice (eg, "Do x." but never "Does x.").

	Optional paragraphs may follow, providing more details about the *use* of the function; these may get parsed as documentation. Explain any non-obvious parameters, special cases, errors, returns, etc, noting that the header itself should be self-documenting and does not need to be completely restated in prose.
	'''
	'''
	A second docstring, directly after the first, may be used to document the unexposed *design* of the function and issues related to the development and testing, particularly if there are concerns which cannot be adequately addressed by inline comments.
	'''

	if value: # Don't forget to leave 1 blank line after the docstring(s)—or function header, if there is no docstring
		...
]
# 
# +++
# Output
# 
if __name__ == '__main__':
	...
# 
# ... # Acknowledgments and other NK Metadata Format footer divisions, like Todo, are *very* common in code—they must be placed *after* the final line of code
"""

+++
Class Diagrams

In order to make UML-compatible class diagrams in plaintext, use the following format:

"""
+ public_var: int
# _restricted_var: str
- __private_var: bool
*[+|#|-] overridden_var: list
_[+|#|-] class_var: float

+ public_method(params): void
# _restricted_method(params): int
- __private_method(params): str, int, list
*[+|#|-] overridden_method(params): func
_[+|#|-] class_method(params): obj
"""