Presentation Outline

https://github.com/bizzlebin/team_g/blob/master/team/presentation_outline.txt

***

By Jeremiah Thomas, et al

***

Created 2020-11-24

Updated 2020-12-07

+++
Description

The class presentation for the project, to be given over Teams. Depending on the connection quality, we may have to shuffle the presenters around. The requirements are a. give a brief description of your project, b. demonstrate your application, and c. tell the class what you have learned in this experience.

+++
Presentation

1. The Problem
1.1. We all use Python everyday: it is a powerful, multi-paradigm language that is easy to write and even easier to test.
1.2. We all also know the importance of a readme: to document the project, share our vision, and legally protect the code.
1.3. But creating a setup.py file to distribute and install a Python project has previously been tedious, repetitive, and error-prone. What are the fields? Were those arguments lists or strings? What is the difference between a URL and download URL? It has been time-consuming and draining. Until now...
2. The Solution
2.1. Enter Readme Parser: the way to make setup.py easy!
2.2. Based on a side project begun during CSC 122 out of the aforementioned frustrations, Readme Parser has full setuptools compatibility, meaning it works with PIP, either locally or on the PyPI (Python Package Index).
2.3. It takes readmes written in the universal New Kidron Metadata Format (itself adhering to the Uniform English Writing Style Guide, or UEWSG) and parses them into valid setup.py files instantly.
2.4. The only user input needed is the location of the readme, which is input via a user-friendly Tkinter dialog box; a further warning box may pop up if the directory already contains a setup.py file, asking the user if they want to overwrite it or not.
2.5. Error handling is robust, with the program catching everything from missing files to unwritable directories.
2.6. The program is modular, with all the parsing driven by regex in a semantic JSON file that is easy to tweak, should the user wish to use a different version of the NK Metadata Format.
2.7. And to make parsing easier, the program uses a queue: introduced specifically for this group project, the queue takes in the NKMF divisions one by one and then pushed them out for the second round of parsing, directing each NKMF field within a division into the proper setuptools field.
3. The Demo
3.1. Readme to be parsed (features, simplicity, etc)
3.2. Readme Parser code (show queue, algorithm, TKinter, and output)
3.3. JSON (briefly show the regex abstracted)
3.4. Conversion (run the program live: show parser output in CMD)
3.5. Setup.py (show the file is complete and compliant)
3.6. Install Readme Parser (on Windows, """python setup.py sdist --formats=zip""", then go to new dist folder and run [elevated] """pip install readme_parser-0.3.0.zip""")
4. The Experience
4.1. Jeremiah
4.1.1. Use mock scenarios to run through different usage patterns: catch edge cases, handle unexpected errors, develop better UX. It is very easy to get tunnel vision making features I would like to use but harder to develop—or even imagine—features that a larger number of people need.
4.1.2. Focus on making the program robust, simple, and beautiful—and in that order: in this project, simplicity was probably the biggest challenge. I had to pull back against the use of classes when functions would do, and kept a lot of my own code procedural if there was no reason to call it multiple times or parametrize it as a function. The programming paradigm (functional, OOP, etc) needs to change and adapt to the problem at hand, not the other way around.
4.1.3. Keep growing the management toolbox: as PM, I was able to leverage procedures, specs, and other documentation—sometimes with just a little work to make them more specific or generic—that I'd used before. I chose a few comprehensive standards and stuck to them as widely as possible: across text and code, meetings and presentations. Everything that was set up as a process, even if not perfect, was one less thing to worry about—and could be improved for the next project.
4.2. Eric
4.2.1. This was my first experience working with a team to write a program. It helped me learn more about working in an environment where I have to write code that I then need to integrate with other people's code.
4.2.2. This project helped me to consider more the types of data structures and when one is more useful compared to another. For example we opted to use the queue structure for holding the divided readme text since it is data that is no longer needed once used and a queue provided a quicker method to trash the data after it's use.
4.2.3. Working to review my code for ways to continue simplifying it. Also, the importance of sometimes getting an outside perspective to help see the code in a different way.
4.3. Alex
4.3.1. Starting off as the UI dev was daunting but after we lost a team member I was transferred over to Regex Dev. I've used Regex on and off for years now but I never had the need to dive this deep into it. I now have a much stronger understanding of non-caputuring groups and positive lookaheads and what they can do for me.
4.3.2. Working in a group on a project that wasn't of my own design was a new challenge. There were parts of this program that I just didn't have the time to fully understand and it was a struggle to see the whole picture when I only worked intimately with one part of the project.
4.3.3. It was also new having my contributions reviewed and getting feedback for reiteration over the design. Working alone you get the priviliege of final say. Working in the group there were times I had to reiterate over sections I thought were done because we needed to streamline something here or make it easier to maintain there.s